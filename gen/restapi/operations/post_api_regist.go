// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostAPIRegistHandlerFunc turns a function with the right signature into a post API regist handler
type PostAPIRegistHandlerFunc func(PostAPIRegistParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostAPIRegistHandlerFunc) Handle(params PostAPIRegistParams) middleware.Responder {
	return fn(params)
}

// PostAPIRegistHandler interface for that can handle valid post API regist params
type PostAPIRegistHandler interface {
	Handle(PostAPIRegistParams) middleware.Responder
}

// NewPostAPIRegist creates a new http.Handler for the post API regist operation
func NewPostAPIRegist(ctx *middleware.Context, handler PostAPIRegistHandler) *PostAPIRegist {
	return &PostAPIRegist{Context: ctx, Handler: handler}
}

/*PostAPIRegist swagger:route POST /api/regist postApiRegist

PostAPIRegist post API regist API

*/
type PostAPIRegist struct {
	Context *middleware.Context
	Handler PostAPIRegistHandler
}

func (o *PostAPIRegist) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostAPIRegistParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
