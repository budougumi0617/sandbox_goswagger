// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPostAPIRegistParams creates a new PostAPIRegistParams object
// no default values defined in spec.
func NewPostAPIRegistParams() PostAPIRegistParams {

	return PostAPIRegistParams{}
}

// PostAPIRegistParams contains all the bound params for the post API regist operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostAPIRegist
type PostAPIRegistParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*年齢
	  Required: true
	  In: formData
	*/
	Age string
	/*コメント
	  Required: true
	  Max Length: 1000
	  In: formData
	*/
	Comment string
	/*クエリパラメータ
	  Required: true
	  In: query
	*/
	HogeID int64
	/*名前
	  Required: true
	  In: formData
	*/
	HogeName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostAPIRegistParams() beforehand.
func (o *PostAPIRegistParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdAge, fdhkAge, _ := fds.GetOK("age")
	if err := o.bindAge(fdAge, fdhkAge, route.Formats); err != nil {
		res = append(res, err)
	}

	fdComment, fdhkComment, _ := fds.GetOK("comment")
	if err := o.bindComment(fdComment, fdhkComment, route.Formats); err != nil {
		res = append(res, err)
	}

	qHogeID, qhkHogeID, _ := qs.GetOK("hoge_id")
	if err := o.bindHogeID(qHogeID, qhkHogeID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdHogeName, fdhkHogeName, _ := fds.GetOK("hoge_name")
	if err := o.bindHogeName(fdHogeName, fdhkHogeName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAge binds and validates parameter Age from formData.
func (o *PostAPIRegistParams) bindAge(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("age", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("age", "formData", raw); err != nil {
		return err
	}

	o.Age = raw

	return nil
}

// bindComment binds and validates parameter Comment from formData.
func (o *PostAPIRegistParams) bindComment(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("comment", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("comment", "formData", raw); err != nil {
		return err
	}

	o.Comment = raw

	if err := o.validateComment(formats); err != nil {
		return err
	}

	return nil
}

// validateComment carries on validations for parameter Comment
func (o *PostAPIRegistParams) validateComment(formats strfmt.Registry) error {

	if err := validate.MaxLength("comment", "formData", o.Comment, 1000); err != nil {
		return err
	}

	return nil
}

// bindHogeID binds and validates parameter HogeID from query.
func (o *PostAPIRegistParams) bindHogeID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("hoge_id", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("hoge_id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("hoge_id", "query", "int64", raw)
	}
	o.HogeID = value

	return nil
}

// bindHogeName binds and validates parameter HogeName from formData.
func (o *PostAPIRegistParams) bindHogeName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("hoge_name", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("hoge_name", "formData", raw); err != nil {
		return err
	}

	o.HogeName = raw

	return nil
}
